## pippin88's custom_postgui.hal file
## pippin88@imagineant.com
## customised for generic X-Box controller from Ebay
## Based on:
## http://wiki.linuxcnc.org/cgi-bin/wiki.pl?Simple_Remote_Pendant
## http://wiki.linuxcnc.org/cgi-bin/wiki.pl?Adding_More_Controls_To_Simple_Remote_Pendant
## need linuxcnc 2.5 or better

 loadrt or2 count=5
 loadrt mux4 count=2
 loadrt toggle count=1
 loadrt near count=7
 loadrt and2 count=6
 loadrt mux2 count=3

 addf or2.0 servo-thread
 addf or2.1 servo-thread
 addf or2.2 servo-thread
 addf or2.3 servo-thread
 addf or2.4 servo-thread
 addf mux4.0 servo-thread
 addf mux4.1 servo-thread
 addf toggle.0 servo-thread
 addf mux2.0 servo-thread
 addf mux2.1 servo-thread
 addf mux2.2 servo-thread
 addf near.0 servo-thread
 addf near.1 servo-thread
 addf near.2 servo-thread
 addf near.3 servo-thread
 addf near.4 servo-thread
 addf near.5 servo-thread
 addf near.6 servo-thread
 addf and2.0 servo-thread
 addf and2.1 servo-thread
 addf and2.2 servo-thread
 addf and2.3 servo-thread
 addf and2.4 servo-thread
 addf and2.5 servo-thread

 ## use near for incremental jog moves, must push stick all the way for movement and to avoid unexpected movement by not
 ## pushing stick straight, sensitivity can be adjusted
 setp near.0.in1 1
 setp near.1.in1 1
 setp near.2.in1 1
 setp near.3.in1 -1
 setp near.4.in1 -1
 setp near.5.in1 -1

 # set the jog speed for the joypad again use numbers that make sense for your machine
 setp mux4.0.in0 0 # this one must be 0 to prevent motion unless a button is pressed
 setp mux4.0.in1 25
 setp mux4.0.in2 2000
 setp mux4.0.in3 5000

 ## set the size of incremental moves
 setp mux4.1.in0 0
 setp mux4.1.in1 .1
 setp mux4.1.in2 1
 setp mux4.1.in3 10

 ## add for toggle to toggle between continuous and incremental jog
 net jog-inc toggle.0.in <= input.0.btn-base5

 # the following does the magic of setting the jog speeds
 net remote-speed-slow or2.0.in0 or2.2.in0 input.0.btn-joystick
 net remote-speed-medium or2.1.in0 or2.3.in0 input.0.btn-top2
 net remote-speed-fast or2.0.in1 or2.1.in1 or2.2.in1 or2.3.in1 input.0.btn-pinkie

 net joy-speed-1 mux4.0.sel0 <= or2.0.out
 net joy-speed-2 mux4.0.sel1 <= or2.1.out
 net joy-speed-final halui.jog-speed <= mux4.0.out

 net jog-size-1 mux4.1.sel0 <= or2.2.out
 net jog-size-2 mux4.1.sel1 <= or2.3.out
 net jog-size-final halui.jog.0.increment halui.jog.1.increment halui.jog.2.increment <= mux4.1.out

 setp mux2.0.in1 0
 setp mux2.1.in1 0
 setp mux2.2.in1 0

## hook up the joysticks
 net joy-x-sig mux2.0.in0 near.0.in2 near.3.in2 <= input.0.abs-x-position
 net joy-y-sig mux2.1.in0 near.1.in2 near.4.in2 <= input.0.abs-y-position
 net joy-z-sig mux2.2.in0 near.2.in2 near.5.in2 <= input.0.abs-hat0y-position

## reverse x, y & z using scale as needed
## renumber if you have scale elsewhere in .hal files (e.g. spindle stuff)
 loadrt scale count=3
 addf scale.0 servo-thread
 addf scale.1 servo-thread
 addf scale.2 servo-thread

 ## link scale to mux output for x axis then set the gain to -1
 ## x-axis is correct for me so gain = 1, doesn't invert
 net reverse-x scale.0.in <= mux2.0.out
 setp scale.0.gain 1
 ## link scale to mux output for y axis then set the gain to -1
 net reverse-y scale.1.in <= mux2.1.out
 setp scale.1.gain -1
 ## link scale to mux output for z axis then set the gain to -1
 net reverse-z scale.2.in <= mux2.2.out
 setp scale.2.gain -1

 ## send signal to analog jog if not in incremental jog mode
 net joy-x-jog halui.jog.0.analog <= scale.0.out
 net joy-y-jog halui.jog.1.analog <= scale.1.out
 net joy-z-jog halui.jog.2.analog <= scale.2.out

 ## toggle from continuous to incremental jogs
 net joginc and2.0.in1 and2.1.in1 and2.2.in1 and2.3.in1 and2.4.in1 and2.5.in1 mux2.0.sel mux2.1.sel mux2.2.sel <= toggle.0.out

 ## if toggle is set for incremental and joystick is 1 or -1 make an incremental move
 ## hook up near outputs to and2. inputs
 net jogincx and2.0.in0 <= near.0.out
 net jogincy and2.1.in0 <= near.1.out
 net jogincz and2.2.in0 <= near.2.out
 net jogincxn and2.3.in0 <= near.3.out
 net jogincyn and2.4.in0 <= near.4.out
 net joginczn and2.5.in0 <= near.5.out

 ## To change the direction of incremental move (e.g. if moves opposite to desired) just change the plus and minus portion of halui.jog.N.increment-(plus or minus)

 ## and2 outputs to halui incremental jog
 net jogincx_final halui.jog.0.increment-plus <= and2.0.out
 net jogincy_final halui.jog.1.increment-minus <= and2.1.out
 net jogincz_final halui.jog.2.increment-minus <= and2.2.out
 net jogincxn_final halui.jog.0.increment-minus <= and2.3.out
 net jogincyn_final halui.jog.1.increment-plus <= and2.4.out
 net joginczn_final halui.jog.2.increment-plus <= and2.5.out

 # estop using either shoulder trigger to estop
 # left small shoulder button resets estop, 2nd press turns power on to machine
 net pgm-estop-0 input.0.abs-z-is-pos or2.4.in0
 net pgm-estop-1 input.0.abs-rz-is-pos or2.4.in1
 net pgm-estop or2.4.out halui.estop.activate
 net pgm-estop-2 input.0.btn-base6 halui.estop.reset halui.machine.on

 #-- central buttons activate manual mode and restart the program
 net mode-manual input.0.btn-thumb axisui.set-manual-mode
 net pgm-run input.0.btn-start halui.program.run



